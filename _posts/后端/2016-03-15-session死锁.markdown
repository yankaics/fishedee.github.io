---
layout: post
category: 后端
---

# 1.概述session死锁
# 2.问题![](/assets/img/14580439383320.jpg)

![](/assets/img/14580439427607.jpg)

![](/assets/img/14580439468005.jpg)单页面上线，突然发现偶尔会出现有些请求会延迟到1s的时间，这些请求偶尔会延迟，偶尔不会延迟。# 3.排查
# 3.1.看瓶颈时间![](/assets/img/14580439555983.jpg)
网络请求有很多种情况，dns延迟，路由延迟，或者只是网管看你不顺眼。从后台分析的日志看，延迟更多是由于后台处理导致的，而不是网络问题。
# 3.2.看数据库时间![](/assets/img/14580439671958.jpg)
后台有这么多操作要处理，怎么知道是卡在哪个地方，一般会卡在数据库处理上，可是看日志又不见数据库的延迟太多，只占用了6ms。
# 3.3.profiling![](/assets/img/14580439771532.jpg)![](/assets/img/14580439885559.jpg)
放出大招，使用xhprof测量出每个函数具体耗费的时间。从数据中可以看出，1s的处理延迟中，大概有93%时间耗费在一个叫CI_Session_redis_driver的__get_lock上面。看来这个问题是跟session的死锁有关。
# 4.解决![](/assets/img/14580440264619.jpg)
ci上也探讨了有关session死锁的问题，解决的方案很简单，必要的时候才加载session库，然后用完立即关。![](/assets/img/14580440379101.jpg)

![](/assets/img/14580440416862.jpg)
原来的代码是后台一启动请求时就load session库，然后关闭请求才关session库![](/assets/img/14580440515990.jpg)改为需要用到session时才打开session库，每次用完session就马上关闭。改完以后心里爽yy的，再也很少看到延迟1s的请求了。



