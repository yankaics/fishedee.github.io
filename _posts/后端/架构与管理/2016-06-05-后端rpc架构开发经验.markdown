---
layout: post
category: 后端
---

# 1 概述
后端rpc架构

# 2 服务注册与发现
go-micro,etcd,zookeeper

# 3 服务选择
selector

# 4 编码与解码
codec

# 5 监控
metrics,rate

# 6 目标

## 6.1 问题
 
* 所有服务放在单个进程跑，无法很好地监控每个服务的运行情况，cpu，内存和调用时间
* 所有服务都放在本机上，无法实现分布式运行，和容错处理，希望能实现服务的分离部署，自动负载均衡。
* 单机迁移为分布式的成本尽可能简单与透明
* 单个服务的测试尽可能简单
* 单独调试一个服务尽可能简单。

## 6.2 设计

* 框架支持开启rpc与不开启rpc模式
* 不开启rpc模式时，就像普通的beego框架一样
* 开启rpc模式时，model下的一个文件夹为一个服务，包名作为服务名。启动后，以所在的包名作为服务名，将服务名与启动IP写入到注册中心区。要注意的是，rpc启动时需要指定为两种，启动主服务（路由），启动模型层服务，默认为同时启动所有服务，也就是在单机上实现rpc模式。

入口进程会监控下方的多个子进程。关闭时同时关掉所有的子进程，启动时根据子进程的依赖顺序来启动，运行时监控子进程的运行情况，子进程崩溃时自动重启。

非rpc模式与rpc模式，都加入模型层服务的调用时间统计。异常需要支持跨服务的传递。

## 6.3 faq

* rpc需要写idl文件么? 

不需要，需要的话跟原来的单机编写有比较大的差距，由fishgen根据代码来生成接口即可。造成单机代码迁移为分布式代码的成本过高。

* 模型层服务支持直接的http访问么

支持，模型层的本质就是一个http2的post的json服务。这样能简单迅速地让php，python的控制层接入到服务中。

# 7 目标2

## 7.1 问题
由于原框架同时整合了通信，ioc，数据库，cache等模块，模块之间的耦合严重，导致框架中各个模块难以被单独地使用，而且使用ioc时总有一种莫名其妙就实现了的感觉。希望框架做的事情更透明更简单。

## 7.2 设计

```
type LoginAo struct{
	Init func() Error
	IsLogin func(ctx *Context) (bool,Error)
	CheckMustLogin func(ctx *Context) Error
}

type loginAo struct{
}

func (this *loginAo) Init() Error{
	return nil
}

func (this *loginAo) IsLogin(ctx *Context) (bool,Error) {
	return true,nil
}

func (this *loginAo) CheckMustLogin(ctx *Context) Error {
	return nil
}

func init(){
	a := &loginAo{}
	RegisterService(LoginAo{
		Init:a.Init,
		IsLogin:a.IsLogin,
		CheckMustLogin:a.CheckMustLogin,
	})
}
```

定义服务

```
func main(){
	var a LoginAo
	err := InitService(&a)
	if err != nil{
		panic(err)
	}
	a.IsLogin(&Context{})
}
```

使用服务

```
type LoginAo2 struct{
	Init func() Error
	IsLogin func(ctx *Context) (bool,Error)
	CheckMustLogin func(ctx *Context) Error
}

type loginAo2 struct{
	db DB
	log Log
	loginAo LoginAo
}

func (this *loginAo2) Init() Error{
	this.db,err = NewDB()
	if err != nil{
		panic(err)
	}
	this.log,err = NewLog()
	if err != nil{
		panic(err)
	}
	err = InitService(&this.loginAo)
	if err != nil{
		panic(err)
	}
	return nil
}

func (this *loginAo2) IsLogin(ctx *Context) (bool,Error){
	this.log.Debug("%v","123")
	return this.loginAo.IsLogin(ctx)
}

func (this *loginAo2) CheckMustLogin(ctx *Context) Error {
	this.log.Debug("%v",456)
	return this.loginAo.CheckMustLogin(ctx)
}

func init(){
	a := &loginAo2{}
	RegisterService(LoginAo2{
		Init:a.Init,
		IsLogin:a.IsLogin,
		CheckMustLogin:a.CheckMustLogin,
	})
}
```

服务嵌套

```
type loginController struct{
	loginAo2 LoginAo2
}

func (this *loginController) Init() Error {
	err := InitService(&this.loginAo2)
	if err != nil{
		panic(err)
	}
	return nil
}

func (this *loginController) IsLogin_Json() (bool,Error){
	return this.loginAo2.IsLogin(this.Ctx)
}

func (this *loginController) CheckMustLogin_Json() (interface{},Error){
	return nil,this.loginAo2.CheckMustLogin()
}

func (this *loginController) AutoRender(data interface{},err Error,viewname string){
	if err != nil{
		this.Ctx.Write([]byte("Server Internal Error"))
	}else{
		data,err := json.Marshal(data)
		if err != nil{
			panic(err)
		}
		this.Ctx.Write(data)
	}
}

func init(){
	InitRoute("dd",&loginController{})
}
```

控制器与路由，这个是额外的演示写法，严格来说不属于micro-service框架的一部分

* 错误怎么处理

目标：

1. 去除WithError,WithException的自动生成
2. 保留像Exception处理错误的方式
3. 调用方能方便的根据被调用方的错误情况来重试

错误统一使用Error类型，这个类型除了golang的error的Err函数外，还有GetCode,GetMsg,GetStack函数，用来指明出错的错误码，错误描述，以及错误堆栈，错误描述。

```
//业务异常
panic(NewError(1,"用户未登录"))
//系统异常
panic("数据库崩溃")
``` 

同时，框架支持接收抛出的NewError类型，框架将默认的系统异常设置为6000的固定错误码，然后返回给上层。

使用error与异常相结合的方式来处理错误，有以下好处：

1. 不再需要WithError,WithException的方法
2. 调用方可以随意容错被调用方的服务情况。
3. 服务内部能像原来一样panic来抛出异常，不需要像原来go一样每次执行完一个函数后都去检查一下返回值。当然，你也可以沿用原有go的错误处理办法，这也是没有什么问题的。

带来的麻烦为：

1. 服务的边界处都需要显式地处理异常，不能像原来异常默认一路抛出到底的方式，异常最多只会在服务内执行，服务外就会变成一个错误。

这样的错误处理结合了error与异常的方式，既简单又直接，写代码也方便。唯一的不好在于服务的边界都需要显式地去检查异常了，这是需要新生成代码的。

* 配置怎么共用

配置应该能识别能根据服务的位置，来获取不同的服务配置信息。多服务间怎么共享单个配置，由配置本身提供机制来实现。


