---
layout: post
category: 前端
---

# 1 概述
安卓webview经验汇总

# 2 引擎

## 2.1 自带
安卓自带有一个webview引擎，优点是安装包比较小，缺点是兼容性有很多问题，而且还各种bug，4.2以下的addJavascriptInterface的注入攻击。

## 2.2 Crosswalk
Intel赞助的一个项目，将chromium移植到手机上，安装包上包含的就是一整个chromium的webview引擎，所以安装包比较大，22m，优点是快，兼容性好，稳定性好，缺点是大，炒鸡大。

后来出了Crosswalk-Lite，说是将Chromium中的webgl等不必要的部分删掉，精简成一个只包含常用功能的webview引擎，有用过，可是比较不稳定，而且第一次启动时还会因为解压压缩包的原因导致超级慢，不推荐使用。

## 2.3 X5
QQ家的项目，由于微信与QQ中内置了一个自带的浏览器内核，所以开放出浏览器内核X5引擎，当用户装有微信或QQ时，会自动切换为X5内核的浏览器，否则会使用自带的浏览器。支持的html5特性没有Crosswalk标准而且全面，但胜在微信与QQ的安装率很高，所以在对安装包有严格限制的情况下，非常推荐使用X5引擎。另外，X5引擎自带有video全屏，图片上传等功能，这点比Crosswalk要好。

## 2.4 总结
如果是纯粹的hybrid项目，是比较建议使用Crosswalk的，质量很好，我们线上的app平均崩溃率只有0.2%。如果对安装包大小有要求，或者webview只是app中嵌套的一个小功能，则建议使用X5引擎。

# 3 webview通信
安卓webview通信，安卓的webview与javascript之间如何安全可靠高效的通信，这个看似简单的问题，其实很头疼。

## 3.1 原始方法

```
//设置支持javascript 
setting.setJavaScriptEnabled(true); 
//javascript->Java
webView.addJavascriptInterface(new Object(){   
	public void startPhone(String num){ 
		Intent intent=new Intent(); 
	                   
		intent.setAction(Intent.ACTION_CALL); 
		intent.setData(Uri.parse("tel:"+num)); 
		startActivity(intent); 
	}
}, "demo"); 
//Java->javascript
webView.loadUrl("javascript:alert(123)"); 
```

使用webview下的addJavascriptInterface就能实现javascript通信给java，而loadUrl就能实现java通信给javascript。这个方案优点在于简单可靠，缺点是无法传入javascript中的闭包参数，而且4.2版本下的安卓还有[安全性问题](http://www.yssec.com/newsdetail.asp?vid=1009)

## 3.2 拦截url

``` public WebResourceResponse shouldInterceptRequest(WebView view,String url) {
	return m_jsInterface.shouldInterceptLoadRequest(url);
}
```

安卓的setWebViewClient中提供了可以拦截url请求的方法，如果我们将所有javascript对java的接口调用改为ajax请求，然后返回时像服务器一样将数据写入WebResourceResponse不就可以了。

```
public WebResourceResponse shouldInterceptLoadRequest(String url) {
    try{
        //校验协议
        final Uri urlInfo = Uri.parse(url);
        if( urlInfo.getScheme().equals("http") == false )
            return null;
        //校验pathInfo
        List<String> pathInfo = urlInfo.getPathSegments();
        if( pathInfo.size() != 3 ){
            return null;
        }
        final String schemaName = pathInfo.get(0);
        final String objectName = pathInfo.get(1);
        final String methodName = pathInfo.get(2);
        if( schemaName.equals("crossapi") == false )
            return null;
        Log.d("SafeWebView","crossapi request "+url);

        final PipedOutputStream out = new PipedOutputStream();
        PipedInputStream in = new PipedInputStream(out);

        //调用接口
        invokeBridge(objectName,methodName,new SafeWebViewJsInferfaceUriBridge(urlInfo,out));
        return new WebResourceResponse("text/plain","utf-8",in);
    }catch(Exception e){
        e.printStackTrace();
        return null;
    }
}
```

写法还是蛮简单的，要注意的是使用PipedOutputStream来输出数据，避免在shouldInterceptLoadRequest长时间执行，导致UI线程阻塞

```
$.get("/crossapi/device/waitResponse",{test:"你好"},function(data){
     console.log(JSON.stringify(data));
 });
```

像ajax一样调用远程请求，来实现javascript调用java即可，java回调javascript则通过的是WebResponse写入。这种方法用很好的安全性，而且兼容性也很好，而且也支持javascript的闭包参数传入。

我们将这种办法也在线上沿用了很久，基本也没什么问题。可是，在做友盟推送接口发现，这种做法的系统消耗比较大，而且如果一个接口的阻塞比较久不返回，就会连累其他接口不及时返回。每次回调的次数只能是一次，不能说javascript请求一次java后，java能无限次地回调javascript接口，这个限制使得在做推送接口时也显得比较麻烦。

## 3.3 拦截confirm+loadUrl调用

```
@Override
public boolean onJsConfirm(WebView view, String url, String message,
                           JsResult result) {
    boolean isHandle = m_jsInterface.onJsConfirm(view, message);
    if( isHandle ){
        result.confirm();
        return true;
    }
    return super.onJsConfirm(view, url, message, result);
}
```

安卓的setWebChromeClient中提供了可以拦截confirm,alert和prompt，如果我们在这里将请求拦截，然后返回时使用loadUrl来注入javascript不就可以返回了。问题是，loadUrl只支持基本类型的回调，不支持javascript的闭包回调，怎么办？

```
var CrossapiCallbackPool = [];
var Crossapi = function(url,argv,callback){
	CrossapiCallbackPool.push(callback);
	var callbackId = CrossapiCallbackPool.length - 1;
	var bundle = {
		url:url,
		argv:argv,
		callback:callbackId,
	};
	var prefix = "CrossApiBridge:"+JSON.stringify(bundle);
	confirm(prefix);
};
```

解决办法时，传入confirm前，将闭包数据转换为CallbackPool上一个整数ID就可以了，这样回调时使用

```
window.CrossapiCallbackPool[callbackId](xxxx)
```

就能实现java对javascript数据的闭包回调了

```
public boolean onJsConfirm(WebView webView,String message){
    try{
        //校验协议
        String prefix = "CrossApiBridge:";
        if( message.startsWith(prefix) == false ){
            return false;
        }
        JSONTokener tokener = new JSONTokener(message.substring(prefix.length()));
        JSONObject invokeInfo = (JSONObject)tokener.nextValue();
        String url = invokeInfo.getString("url");
        Object argv = invokeInfo.get("argv");
        int callbackId = invokeInfo.getInt("callback");

        String[] splitInfoTemp = url.split("/");
        List<String> splitInfo = new ArrayList<String>();
        for( String singleSplit : splitInfoTemp){
            if( singleSplit.trim().length() == 0 ){
                continue;
            }
            splitInfo.add(singleSplit.trim());
        }
        if( splitInfo.size() < 2 ){
            return false;
        }
        if( argv instanceof JSONObject == false ){
            return false;
        }
        final String objectName = splitInfo.get(0);
        final String methodName = splitInfo.get(1);

        //调用接口
        invokeBridge(objectName,methodName,new SafeWebViewJsInferfacePromptBridge((JSONObject)argv,webView,callbackId));
        return true;
    }catch(Exception e){
        e.printStackTrace();
        return false;
    }
}
```

写法还是挺简单的，要注意的是，这种方法需要预先在javascript环境中注入代码，不然回调中用不了。可以指定用户加载某个javascript文件，而这个文件默认在放在安卓本地环境，这样的话javascript用户用起来比较方便。

```
Crossapi("/device/waitResponse",{test:"你好"},function(data){
	console.log(data);
});
```

调用时直接调用即可，这种方法较好地实现了，安全，高效，支持闭包传递的特性，解决了拦截url的多请求阻塞问题。我们也在逐步迁移到这种webviewbridge的手法上。这也是目前较为流行的[做法](https://github.com/pedant/safe-java-js-webview-bridge)

## 3.4 总结
怎样建立一个可靠的webviewbridge，这个问题其实也不简单噢，需要好好考虑一下。

# 4 配置

## 4.1 硬件加速

```
<application
	android:hardwareAccelerated="true"
	android:allowBackup="false"
	android:label="@string/app_name"
	android:icon="@mipmap/ic_launcher"
	android:theme="@style/AppTheme"
	tools:replace="android:allowBackup">
</application>
```

在AndroidManifest中设置android:hardwareAccelerated为true，开启硬件加速模式

## 4.2 javascript

```
this.getSettings().setJavaScriptEnabled(true);
```

开启webview的javascript，不然网页中的javascript代码默认是不启动的。

## 4.3 视频
全屏播放视频有两种模式，分别是webkit播放模式和x5播放模式

### 4.3.1 webkit播放模式
webkit播放模式是默认的播放模式，自带浏览器，Crosswalk浏览器和X5内核浏览器都支持的播放模式。其原理为在遇到需要全屏播放视频的页面时，webkit会将播放视频的view传递给开发者，开发者将播放view替代webview即可。

```
WebChromeClient chromeClient = new WebChromeClient() {
	View myVideoView;
	View myNormalView;
	CustomViewCallback callback;

	@Override
	public void onShowCustomView(View view, CustomViewCallback customViewCallback) {
		View normalView = X5WebView.this;
		ViewGroup viewGroup = (ViewGroup) normalView.getParent();
		viewGroup.removeView(normalView);
		viewGroup.addView(view);
		myVideoView = view;
		myNormalView = normalView;
		callback = customViewCallback;
	}

	@Override
	public void onHideCustomView() {
		if (callback != null) {
			callback.onCustomViewHidden();
			callback = null;
		}
		if (myVideoView != null) {
			ViewGroup viewGroup = (ViewGroup) myVideoView.getParent();
			viewGroup.removeView(myVideoView);
			viewGroup.addView(myNormalView);
		}
	}
};
this.setWebChromeClient(chromeClient);
```

### 4.3.2 X5内核

X5浏览器支持三种播放视频的模式，分别是webkit播放模式与x5播放模式，x5播放模式是将视频文件跳转到一个特别的activity来单独播放，体验更好，速度也更流畅，推荐使用。但要注意的是，**x5播放模式需要WebView的Context必须为Activity类型**，我们试过在react-native中嵌套X5浏览器，传入webview的context是ReactContext，发现视频一直都是黑屏，坑爹呀。

```
<activity
    android:name="com.tencent.smtt.sdk.VideoActivity"
    android:alwaysRetainTaskState="true"
    android:configChanges="orientation|screenSize|keyboardHidden"
    android:exported="false"
    android:launchMode="singleTask" >
    <intent-filter>
        <action android:name="com.tencent.smtt.tbs.video.PLAY" />
        <category android:name="android.intent.category.DEFAULT" />
    </intent-filter>
</activity>
```

在AndroidManifest中加上这个activity

```
if(this.getX5WebViewExtension()!=null){
    Bundle data = new Bundle();
    data.putBoolean("standardFullScreen", false);//true表示标准全屏，false表示X5全屏；不设置默认false，
    data.putBoolean("supportLiteWnd", false);//false：关闭小窗；true：开启小窗；不设置默认true，
    data.putInt("DefaultVideoScreen", 2);//1：以页面内开始播放，2：以全屏开始播放；不设置默认：1
    this.getX5WebViewExtension().invokeMiscMethod("setVideoParams", data);
}
```

在webview加上以上配置，那么在遇到带有视频的网页时，点击播放按钮就会跳转到com.tencent.smtt.sdk.VideoActivity来全屏播放视频了，非常方便。

## 4.4 对话框
有时候，我们需要更改console,alert,confirm,prompt这几种原生的对话框样式，我们可以这么做。

```
WebChromeClient chromeClient = new WebChromeClient() {
	@Override
	public boolean onConsoleMessage(ConsoleMessage var1) {
        return super.onConsoleMessage(var1);
    }

	@Override
	public boolean onJsConfirm(WebView arg0, String arg1, String arg2, JsResult arg3) {
		//TODO
		return super.onJsConfirm(arg0, arg1, arg2, arg3);
	}

	@Override
	public boolean onJsAlert(WebView arg0, String arg1, String arg2, JsResult arg3) {
		//TODO
		return super.onJsAlert(null, "www.baidu.com", "aa", arg3);
	}

	@Override
	public boolean onJsPrompt(WebView arg0, String arg1, String arg2, String arg3, JsPromptResult arg4) {
		//TODO
		return super.onJsPrompt(arg0, arg1, arg2, arg3, arg4);
	}
};
this.setWebChromeClient(chromeClient);
```

修改一下WebChromeClient里面的回调就可以了，挺简单的。

## 4.5 缓存

```
webSetting.setAppCacheEnabled(true);
webSetting.setDatabaseEnabled(true);
webSetting.setDomStorageEnabled(true);
webSetting.setAppCacheMaxSize(Long.MAX_VALUE);
webSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);
```

开启html5的各种缓存模式，database,appcache,以及domstorage，而cacheMode是用来配置http协议上的缓存。

## 4.6 拦截请求

### 4.6.1 页面加载

```
WebViewClient webviewClient = new WebViewClient() {
    public void onPageFinished(WebView view, String url) {
        //TODO
    }

    public void onPageStarted(WebView view, String url, Bitmap favicon) {
        //TODO
    }
}
this.setWebViewClient(webViewClient);

WebChromeClient webChromeClient = new WebChromeClient() {
    public void onProgressChanged(WebView var1, int var2) {
    	//TODO
    }
}
this.setWebChromeClient(webChromeClient);
```

webViewClient与webChromeClient中一起提供了页面开始加载，加载中，加载完成这三个事件，这也是大多数浏览器中实现顶部进度条的原理。

### 4.6.2 页面内请求

```
WebViewClient webviewClient = new WebViewClient() {
    public WebResourceResponse shouldInterceptRequest (WebView view,
                                                       WebResourceRequest request) {
        //TODO
        return super.shouldInterceptRequest(view,request);
    }

    public WebResourceResponse shouldInterceptRequest(WebView view,
                                                      String url) {
        //TODO
        return super.shouldInterceptRequest(view,url);
    }
}
this.setWebViewClient(webViewClient);
```

拦截页面中的ajax，文件等各种各样的请求，也有被用来做webview通信的。

### 4.6.3 页面外请求

```
WebViewClient webviewClient = new WebViewClient() {
	/**
	 * 防止加载网页时调起系统浏览器
	 */
	public boolean shouldOverrideUrlLoading(WebView view, String url) {
		view.loadUrl(url);
		return true;
	}
}
this.setWebViewClient(webViewClient);
```

拦截页面中跳转到其他页面的请求，一般不做拦截的话，安卓浏览器中会弹出提示框，提示你是否跳转到系统浏览器中看这个页面。所以，要么是在重用本地的webview来加载新页面，要么是新开一个activity的webview来加载新页面，看业务了。

### 4.6.4 新窗口请求

```
WebChromeClient webChromeClient = new WebChromeClient() {
    public boolean onCreateWindow(WebView var1, boolean var2, boolean var3, Message var4) {
        return super.onCreateWindow(var1,var2,var3,var4);
    }
}
this.setWebChromeClient(webChromeClient);
```

拦截用javascript来启动新窗口的请求，这个一般是不拦截的，不允许javascript来开启新窗口。

## 4.7 安全

```
this.getSettings().setAllowFileAccess(true); this.getSettings().setAllowFileAccessFromFileURLs(true); this.getSettings().setAllowUniversalAccessFromFileURLs(true);
```

设置file域名下页面的安全性，一般file域名是设置为无跨域的，简单暴力。

# 5 启动

## 5.1 loadUrl启动

```
webView.loadUrl("file:///android_asset/webpage/fullscreenVideo.html");
webView.loadUrl("http://www.baidu.com");
```

要么是加载本地资源上的文件，要么是加载网络上的文件，都可以。

## 5.2 loadData启动

```
view.loadDataWithBaseURL(view.getBaseUrl(), html, "text/html", view.getCharset(), null);
```

传入一段指定的html数据，让webview跑起来，这个还是比较简单的。

```
<!--错误演示-->
<div>HelloWorld</div>
<!--正确演示-->
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8"/>
	</head>
	<body>
		<div>HelloWorld</div>
	</body>
</html>
```

但是要注意的是，很多时候，我们是用这个loadData来展示富文本内容的，所以就直接将div扔进去loadData里面，这样会造成很多兼容性问题，所以，**请务必在富文本前后加上恰当的html内容后才扔进webview内部**。

# 6 FAQ

## 6.1 webview高度自适应

```
this.addJavascriptInterface(new Object(){
	@JavascriptInterface
    public void getContentHeight(double height){
        //TODO height
    }
},"NativeAndroid");

WebChromeClient webChromeClient = new WebChromeClient() {
   	public void onPageFinished(WebView view, String url) {
        view.loadUrl("javascript:(function() { " + "NativeAndroid.getContentHeight(document.documentElement.scrollHeight);" + "})();");
    }
}
this.setWebChromeClient(webChromeClient);
```

有时候需要webview的高度自适应其内部内容的高度。目前并没有什么好办法，就是在onPageFinished后执行一段javascript代码，让页面的高度用javascriptInterface的方法传递到native端。








