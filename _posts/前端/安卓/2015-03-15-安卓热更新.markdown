---
layout: post
category: 前端
---

> 安卓的版本更新一直都是个头疼的问题，安卓的市场太多，一个一个更新会很头疼。另外，有些严重的bug一旦发布后，从发现到全量修复的链条很长，造成严重的用户体验。安卓热更新就是一个不错的解决方案。

# 代码替换
## 概述
如何将新的代码无缝接入到旧的apk中，目前有两个较成熟的方案。

## DroidPlugin
奇虎的[DroidPlugin](https://github.com/Qihoo360/DroidPlugin)解决方案，目前是最成熟的安卓热更新方案，通过hook的办法，让宿主机调用多个插件的apk，来实现热更新，插件的apk可以动态更新下载。优点是接入非常方便，基本不用改原来的代码，缺点是不支持自定义通知栏，宿主和插件之间不共享资源文件。

## DynamicAPK
携程的[DynamicAPK](https://github.com/CtripMobile/DynamicAPK)解决方案，最完整的热更新解决方案，优点是宿主和插件共享资源，缺点是编译资源时比较麻烦，操作繁琐。

## Small
全平台的[Small](https://github.com/wequick/Small)解决方案，最全面的平台更新方式，同时支持iOS,Android,html5的热更新和插件化，简直是屌到炸裂了。

# 代码更新
## 概述
如何感知服务器端的代码更新，并如何下载更新，这是个问题。

## 全量更新
使用http的etag字段，让客户端每次请求新的插件时带上文件的md5字段。服务器收到md5后，与本地的文件进行比较。从而返回304，或者200（一份全新的文件）。

## 增量更新
腾讯增量更新[mt](http://mt.tencent.com/)是一个js文件的增量更新方案。安卓上的话暂时没有找到对应的实现，不过算法比较简单，通过将安卓上的文件分割成各个chunk部分，然后将这些chunk的md5发布到服务器。服务器进行chunk的增量比较后，将要更新的部分推送给客户端，客户端更新文件后，比较最终的md5是否正确。

# 总结
热更新的整体方案

1. 提高更新速度，满足互联网的快速迭代快速更新的需求。
2. 降低更新风险，万一发布失败了，只需直接回滚就可以了。
3. 提高在线debug的能力，万一出现什么问题，可以现场更新代码，增加debug日志，然后发送到服务器后台，大幅提高debug能力。




